(define (constant? x) (number? x))
(define (variable? x) (string? x))
(define (sum? x) (and (pair? x) (eq? (car x) "+")))
(define (product? x) (and (pair? x) (eq? (car x) "*")))
(define (same-variable? v1 v2) (and (variable? v1)
                                    (variable? v2)
                                    (eq? v1 v2)))
(define (=number? x y)
        (and (number? x) (eq? x y)))
(define (make-constant x) x)
(define (make-sum a1 a2)
  (cond [(=number? a1 0) a2]
        [(=number? a2 0) a1]
        [(and (number? a1) (number? a2)) (+ a1 a2)]
        [else (list "+" a1 a2)]))
(define (make-product m1 m2)
  (cond [(or (=number? m1 0) (=number? m2 0)) 0]
        [(=number? m1 1) m2]
        [(=number? m2 1) m1]
        [(and (number? m1) (number? m2)) (* m1 m2)]
        [else (list "*" m1 m2)]))
(define (addend s) (car (cdr s)))
(define (augend s) (car (cdr (cdr s))))
(define (multiplier s) (car (cdr s)))
(define (multiplicand s) (car (cdr (cdr s))))

(define (deriv exp var)
    (cond   ((constant? exp) 0)
            ((variable? exp)
                (if (same-variable? exp var) 1 0))
            ((sum? exp)
                (make-sum
                    (deriv (addend exp) var)
                    (deriv (augend exp) var)))
            ((product? exp)
                (make-sum
                    (make-product
                        (multiplier exp)
                        (deriv (multiplicand exp) var))
                    (make-product
                        (deriv (multiplier exp) var)
                        (multiplicand exp))))))

(deriv (list "+" 7 "x") "x") ; 1
(deriv (list "*" 7 "x") "x") ; 7
(deriv (list "*" (list "*" "x" "x") "x") "x")
(deriv (list "+" (list "*" (list "+" 2 "x") (list "+" 6 "x")) (list "*" "x" 23)) "x")
(deriv (list "*" (list "*" "x" "y") (list "+" "x" "3")) "x")
